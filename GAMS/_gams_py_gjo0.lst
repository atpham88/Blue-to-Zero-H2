GAMS 36.2.0  r433180e Released Sep  3, 2021 WEX-WEI x86 64bit/MS Windows - 01/29/23 05:13:15 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  *Michael Craig 16 Apr 2020
   2   
   3  *$offlisting
   4  *$offsymxref offsymlist
   5  Options
   6           optcr = 1E-2
   7           reslim = 100000
   8           threads = 0
   9           solvelink = 5
  10           limcol = 0
  11           limrow = 0
  12           solprint = silent
  13           ;
  14   
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\BlueToZeroH2\Model\GAMS\CESharedFeaturesH2.gms
  16  *Michael Craig 16 Apr 2020
  17   
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\BlueToZeroH2\Model\GAMS\EDAndUCSharedFeaturesH2.gms
  19  *Michael Craig 14 May 2020
  20   
  22   
  23  Sets
  24  *Existing generators
  25           egu                             existing generators
  26           renewegu(egu)                   existing wind and solar generators
  27           windegu(renewegu)               existing wind generators
  28           solaregu(renewegu)              existing solar generators
  29           hydroegu(renewegu)
  30           genegu(egu)                     egus that are not dacs or storage
  31           dacsegu(egu)                    direct air capture units
  32           notdacsegu(egu)                 egus that are not dac units
  33           storageegu(egu)                 storage units
  34           h2storageegu(storageegu)        storage units that are hydrogen
  35           nonh2storageegu(storageegu)     non h2 storage units
  36           h2egu(egu)                      egus that produce h2 (not electricity producing egus) (ton)
  37           egenegu(egu)                    egus that produce electricity
  38           electrolyzeregu(egu)            existing electrolyzer (ton)
  39           h2eegu(egu)                     egus that produce electricty from h2 (GWh)
  40           fuelcellegu(h2eegu)
  41           h2turbineegu(h2eegu)
  42           h                               hours
  43                   z                       zones
  44                   l                       lines
  45           ;
  46   
  47  Parameters
  48  *SIZE PARAMETERS [GW]
  49           pCapac(egu)                     hourly capacity of existing generators accounting for curtailments [GW]
  50  *HEAT RATES [MMBtu/GWh]
  51           pHr(egu)                        heat rate of existing generators [MMBtu per GWh]
  52  *COST PARAMETERS
  53           pOpcost(egu)                    total operational cost [thousandUSD per GWh] = VOM + FuelCost*HR + EmsCost*EmsRate*HR
  54  *RAMP RATES [GW/hr]
  55           pRamprate(egu)                  up and down ramp rate of EGU [GW per hr]
  56  *EMISSIONS RATES [short ton/MMBtu]
  57           pCO2emrate(egu)                 CO2 emissions rate of existing generators [short ton per MMBtu]
  58  *EMISSIONS COST [$/short ton]
  59           pCO2cost
  60  *Conversion[MWh/kg or GWh/ton]
  61           pElectrolyzerCon
  62           pFuelCellCon
  63           pH2TurbineCon
  64  *RENEWABLE GENERATION CAPS
  65           pMaxgenwind(z,h)                  max hourly generation for existing wind [GWh]
  66           pMaxgensolar(z,h)                 max hourly generation for existing solar [GWh]
  67  *STORAGE PARAMETERS
  68           pStoinenergymarket              whether storage can provide energy (1) or not (0)
  69           pEfficiency(storageegu)         round trip storage efficiency
  70           pCapaccharge(storageegu)        max charging capacity (GW)
  71           pMaxsoc(storageegu)             max stored energy (GWh)
  72           pMinsoc(storageegu)             min stored energy (GWh)
  73  *ZONAL PROPERTIES
  74                  pGenzone(egu)                                   zone in which egu is located
  75                  pDemand(z,h)                      hourly electricity demand [GWh]
  76                  pH2Demand(z,h)
  77                  pLinesource(l)                                  zone that is the source of line l
  78                  pLinesink(l)                                    zone that is the sink of line l
  79                  pLinecapac(l)                                   MW capacity of line l
  80                  pH2LineCapac(l)
  81                  pTransEff
  82  *HOURLY ELECTRICITY DEMAND [GWh]
  83           pDemandShifter                  demand shifter (percentage)
  84           pDemandShiftingBlock
  85  *COST OF NONSERVED ENERGY [THOUSAND$/GWH]
  86           pCnse                                   cost of non-served energy [thousandUSD per GWh]
  87  *HOURLY RESERVE REQUIREMENTS [GW]
  88           pRegupreserves(z,h)         regulation up reserve [GW]
  89           pFlexreserves(z,h)
  90           pContreserves(z,h)
  91  *RESERVE PROVISION PARAMETERS
  92  *Convert ramp rate to reserve timeframe
  93           pRampratetoregreservescalar     converts ramp rate timeframe to reg reserve timeframe
  94           pRampratetoflexreservescalar    converts ramp rate timeframe to spin reserve timeframe
  95           pRampratetocontreservescalar    converts ramp rate timeframe to spin reserve timeframe
  96  *Set whether generator can provide reserve
  97           pRegeligible(egu)               existing generators eligible to provide reg reserves [0] or not [1]
  98           pFlexeligible(egu)
  99           pConteligible(egu)
 100  *Set max reserve offer based on eligibility and ramp rate
 101           pMaxflexoffer(egu)
 102           pMaxcontoffer(egu)
 103           pMaxregupoffer(egu)
 104           ;
 105   
GDXIN   C:\Users\atpha\Documents\Postdocs\Projects\BlueToZeroH2\Model\GAMS\_gams_py_gdb0.gdx
--- LOAD  egu = 1:egu
--- LOAD  renewegu = 2:renewegu
--- LOAD  windegu = 3:windegu
--- LOAD  solaregu = 4:solaregu
--- LOAD  hydroegu = 5:hydroegu
--- LOAD  h = 12:h
--- LOAD  z = 13:z
--- LOAD  l = 14:l
--- LOAD  dacsegu = 6:dacsegu
--- LOAD  storageegu = 44:storageegu
--- LOAD  h2storageegu = 45:h2storageegu
--- LOAD  h2egu = 7:h2egu
--- LOAD  h2eegu = 8:h2eegu
--- LOAD  fuelcellegu = 9:fuelcellegu
--- LOAD  h2turbineegu = 10:h2turbineegu
--- LOAD  electrolyzeregu = 11:electrolyzeregu
--- LOAD  pCapac = 31:pCapac
--- LOAD  pHr = 27:pHr
--- LOAD  pOpcost = 30:pOpcost
--- LOAD  pRamprate = 29:pRamprate
--- LOAD  pCO2emrate = 28:pCO2emrate
--- LOAD  pCO2cost = 26:pCO2Cost
--- LOAD  pElectrolyzerCon = 76:pElectrolyzerCon
--- LOAD  pFuelCellCon = 77:pFuelCellCon
--- LOAD  pH2TurbineCon = 78:pH2TurbineCon
--- LOAD  pMaxgensolar = 33:pMaxgensolar
--- LOAD  pMaxgenwind = 34:pMaxgenwind
--- LOAD  pH2Demand = 17:pH2Demand
--- LOAD  pH2LineCapac = 43:pH2Linecapac
--- LOAD  pStoinenergymarket = 50:pStoinenergymarket
--- LOAD  pEfficiency = 46:pEfficiency
--- LOAD  pMaxsoc = 48:pMaxsoc
--- LOAD  pMinsoc = 49:pMinsoc
--- LOAD  pCapaccharge = 47:pCapaccharge
--- LOAD  pGenzone = 32:pGenzone
--- LOAD  pDemand = 16:pDemand
--- LOAD  pLinesource = 41:pLinesource
--- LOAD  pLinesink = 42:pLinesink
--- LOAD  pLinecapac = 39:pLinecapac
--- LOAD  pTransEff = 40:pTransEff
--- LOAD  pDemandShifter = 18:pDemandShifter
--- LOAD  pDemandShiftingBlock = 19:pDemandShiftingBlock
--- LOAD  pCnse = 38:pCnse
--- LOAD  pRegupreserves = 23:pRegupreserves
--- LOAD  pFlexreserves = 24:pFlexreserves
--- LOAD  pContreserves = 25:pContreserves
--- LOAD  pRampratetoregreservescalar = 20:pRampratetoregreservescalar
--- LOAD  pRampratetoflexreservescalar = 21:pRampratetoflexreservescalar
--- LOAD  pRampratetocontreservescalar = 22:pRampratetocontreservescalar
--- LOAD  pFlexeligible = 36:pFlexeligible
--- LOAD  pConteligible = 37:pConteligible
--- LOAD  pRegeligible = 35:pRegeligible
 118   
 119  *DEFINE EGU SUBSETS
 120  notdacsegu(egu) = not dacsegu(egu);
 121  egenegu(egu) = not h2egu(egu);
 122  genegu(egu) = not (dacsegu(egu) + storageegu(egu));
 123  nonh2storageegu(storageegu) = not h2storageegu(storageegu);
 124   
 125  *CALCULATE MAX RESERVE OFFERS
 126  pMaxflexoffer(egu) = pFlexeligible(egu)*pRamprate(egu)*pRampratetoflexreservescalar;
 127  pMaxcontoffer(egu) = pConteligible(egu)*pRamprate(egu)*pRampratetocontreservescalar;
 128  pMaxregupoffer(egu) = pRegeligible(egu)*pRamprate(egu)*pRampratetoregreservescalar;
 129   
 130  Variables
 131  *COSTS
 132                   vVarcost(egu,h)
 133  *DEMAND RESPONSE
 134                   vShiftedDemand(z,h)
 135                   ;
 136   
 137  Positive variables
 138  *GENERATION AND RESERVES
 139           vGen(egu,h)                     hourly electricity generation by existing plant [GWh or ton]
 140           vRegup(egu,h)                   hourly reg up reserves provided by existing plant [GWh]
 141           vFlex(egu,h)
 142           vCont(egu,h)
 143  *STORAGE VARIABLES
 144           vStateofcharge(storageegu,h)            "energy stored in storage unit at end of hour h (GWh or ton)"
 145           vCharge(storageegu,h)                   "charged energy by storage unit in hour h (GWh or ton)"
 146  *Inputs for existing electrolyzers, fuel cells and H2 turbines:
 147           vELCharge(electrolyzeregu,h)                electricity input to power electrolyzer
 148           vH2TCharge(h2eegu,h)                     hydrogen input to power H2T tech (hydrogen turbines + fuel cells)
 149  *EMISSIONS
 150           vCO2ems(egu,h)
 151  *TRANSMISSION LINE FLOWS
 152                  vLineflow(l,h)
 153                  vH2Lineflow(l,h)
 154           ;
 155   
 156  Equations
 157  *Op costs
 158           calcvarcosts(egu,h)
 159  *Generation and reserve constraints
 160           limitallresup(egu,h)                           limit total generation plus up reserves of existing plants to capacity
 161  *Renewable generation
 162           limitWindGen(z,h)
 163                   limitSolarGen(z,h)
 164  *Line flows
 165  *               limitLineFlow(l,h)
 166  *Carbon limits
 167           calcco2ems(egu,h)                              sum annual co2 emissions
 168  *Limit of h2 output from electrolyzers
 169           electrolyzerconversion(electrolyzeregu,h)
 170  *Limit of electricity output from fuel cells
 171           fuelcellconversion(fuelcellegu,h)
 172  *Limit of electricity output from H2 turbines
 173           h2turbineconversion(h2turbineegu,h)
 174           ;
 175   
 176  ******************VAR COSTS*****************
 177  calcvarcosts(egu,h)..  vVarcost(egu,h) =e= vGen(egu,h)*pOpcost(egu) + vCO2ems(egu,h)*pCO2cost;
 178  ********************************************
 179   
 180  ******************GENERATION AND RESERVE CONSTRAINTS******************
 181  *Limit spining and regulation reserves each to market participation
 182  vFlex.fx(egu,h)$[pMaxflexoffer(egu)=0] = 0;
 183  vCont.fx(egu,h)$[pMaxcontoffer(egu)=0] = 0;
 184  vRegup.fx(egu,h)$[pMaxregupoffer(egu)=0] = 0;
 185   
 186  *Limit spinning and regulation up reserves together to spare capacity
 187  limitallresup(genegu,h) .. vGen(genegu,h) + vFlex(genegu,h) + vCont(genegu,h) + vRegup(genegu,h) =l= pCapac(genegu);
 188   
 189  *Set lower bound to zero for generation by storage and generating techs.
 190  vGen.lo(notdacsegu,h) = 0;
 191  *Set upper bound to zero for DACS. DACS max capacity is negative and has negative vGen values.
 192  vGen.up(dacsegu,h) = 0;
 193  ********************************************************************
 194   
 195  ******************STORAGE PARAMETERS*******************
 196  *LIMIT GENERATION AND RESERVES
 197  *Bound generation to capacity and ability to participate in energy market
 198  vGen.up(storageegu,h) = pStoinenergymarket * pCapac(storageegu);
 199   
 200  *CHARGE CONSTRAINTS
 201  *Place upper bound on charging
 202  vCharge.up(storageegu,h) = pCapaccharge(storageegu);
 203   
 204  *STATE OF CHARGE BOUNDS
 205  vStateofcharge.lo(storageegu,h) = pMinsoc(storageegu);
 206  vStateofcharge.up(storageegu,h) = pMaxsoc(storageegu);
 207  *******************************************************
 208   
 209  ******************RENEWABLE GENERATION*****************
 210  limitWindGen(z,h)..  pMaxgenwind(z,h) =g= sum(windegu$[pGenzone(windegu)=ORD(z)],vGen(windegu,h));
 211  limitSolarGen(z,h).. pMaxgensolar(z,h) =g= sum(solaregu$[pGenzone(solaregu)=ORD(z)],vGen(solaregu,h));
 212  *******************************************************
 213   
 214  ******************TRANSMISSION LINE FLOWS*****************
 215  *limitLineFlow(l,h).. pLinecapac(l) =g= vLineflow(l,h);
 216  **********************************************************
 217   
 218  ******************CO2 EMISSIONS CONSTRAINT******************
 219  calcco2ems(egu,h)..   vCO2ems(egu,h) =e= vGen(egu,h)*pHr(egu)*pCO2emrate(egu);
 220  ************************************************************
 221   
 222  ******************ELECTROLYZER CONSTRAINT******************
 223  electrolyzerconversion(electrolyzeregu,h)..   vELCharge(electrolyzeregu,h) =e= vGen(electrolyzeregu,h)*pElectrolyzerCon;
 224  ************************************************************
 225   
 226  ******************FUEL CELL CONSTRAINT******************
 227  fuelcellconversion(fuelcellegu,h)..   vH2TCharge(fuelcellegu,h) =e= vGen(fuelcellegu,h)*pFuelCellCon;
 228  ************************************************************
 229   
 230  ******************H2 TURBINE CONSTRAINT******************
 231  h2turbineconversion(h2turbineegu,h)..   vH2TCharge(h2turbineegu,h) =e= vGen(h2turbineegu,h)*pH2TurbineCon;
 232  ************************************************************
 233   
 234  Sets
 235  *EXISTING GENERATORS
 236           nonrenewegu(egu)                   existing nonrenewable generators
 237                  ststorageegu(storageegu)    existing battery storage
 238                  ltstorageegu(storageegu)    existing h2 storage (in MWh)
 239  *CANDIDATE TECHNOLOGIES FOR CONSTRUCTION
 240           tech                               candidate technologies for new construction
 241  *Generators
 242           gentechs(tech)                     generating techs specifically not DACS or storage or h2 production
 243           thermaltech(tech)                  thermal plant types for new construction
 244              CCStech(thermaltech)
 245              nucleartech(thermaltech)
 246              srtech(thermaltech)             small modular reactors
 247              CCtech(thermaltech)
 248           renewtech(tech)                    renewable plant types for new construction
 249              windtech(renewtech)             transInvestments
 250              solartech(renewtech)
 251  *H2 generators and H2 input electricity generators:
 252           h2tech(tech)                       technologies that produce h2
 253              SMRtech(h2tech)                 SMR that produce h2
 254              electrolyzertech(h2tech)        Electrolyzers that produce h2
 255           h2etech(tech)                      H2 turbines and fuel cell
 256              fuelcelltech(h2etech)           Fuel cells
 257              h2turbinetech(h2etech)          H2 turbines
 258  *Storage
 259           storagetech(tech)                  storage plant types for new construction
 260              ststoragetech(storagetech)      new battery storage (in MWh)
 261              ltstoragetech(storagetech)      new h2 storage (in ton)
 262           nonstoragetech(tech)               non storage techs
 263   
 264  *CO2 removal
 265           dacstech(tech)
 266           notdacstech(tech)
 267  *CANDIDATE TRANSMISSION LINES FOR CONSTRUCTION
 268  *               ltech
 269  *HOURS
 270           peakH(h)                           hour with peak net demand
 271           nonInitH(h)                        hours that are not initial horus of a block
 272           ;
 273   
 274  Alias (h,hh);
 275  Alias (l,ll);
 276   
 277  Parameters
 278  *MAX NEW UNITS TO BE BUILT
 279                   pNMaxWind
 280                   pNMaxSolar
 281                   pNMaxNuclear
 282                   pNMaxSR
 283                   pNMaxCC
 284                   pNMaxCCS(CCStech)
 285                   pNMaxDACS(dacstech)
 286                   pPMaxSto(storagetech)        Max battery power capacity
 287                   pEMaxSto(storagetech)        Max battery energy capacity
 288                   pPERatio(ststoragetech)
 289                   pNMaxSMR
 290                   pNMaxSMRCCS
 291                   pNMaxElectrolyzer
 292                   pNMaxFuelcell
 293                   PNMaxH2Turbine
 294  *SIZE PARAMETERS [GW]
 295           pCapactech(tech)                       nameplate capacity of new builds for cost calculations [GW] or [ton]
 296  *HEAT RATES [MMBtu/GWh]
 297           pHrtech(tech)                          heat rate of new builds [MMBtu per GWh]
 298  *COST PARAMETERS
 299           pOpcosttech(tech)                      total operational cost [thousandUSD per GWh] = VOM + FuelCost*HR + EmsCost*EmsRate*HR
 300           pFom(tech)                             fixed O&M cost [thousand$ per GW per yr]
 301           pOcc(tech)                             overnight capital cost [thousandUSD per GW] or [thousandUSD per ton]
 302                   pPowOcc(storagetech)         occ for power capcity for lt storage
 303                   pEneOcc(storagetech)         occ for energy capacity for lt storage
 304  *                pCnse                          cost of nonserved energy [thousandUSD per GW]
 305  *RAMP RATES [GW/hr]
 306           pRampratetech(tech)                    up and down ramp rate of EGU assumed to be the same up & down [GW per hr]
 307  *STORAGE PARAMETERS
 308           pEfficiencytech(storagetech)         round trip battery storage efficiency
 309           pChargeDischargeCapRatio               "ratio of charging to discharging" /1/
 310  *EMISSIONS RATES [short ton/MMBtu]
 311           pCO2emratetech(tech)                   CO2 emissions rate of potential new generators [short ton per MMBtu]
 312  *EMISSIONS CAP AND COST
 313           pCO2emcap                              CO2 annual emissions cap [short tons]
 314  *RENEWABLE GENERATION CAPS
 315           pCf(renewtech,h)                       hourly capacity factors for potential new renewables
 316  *FINANCIAL PARAMETERS
 317           pR                                     discount rate
 318           pLife(tech)                            lifetime of tech [years]
 319           pLifeline
 320           pH2Lifeline
 321           pCrf(tech)                             capital recovery factor
 322                   pCrfline
 323  *ZONAL PARAMETERS
 324                  pGenzonetech(tech)
 325  *               pLinesourcetech(ltech)
 326  *               pLinesinktech(ltech)
 327  *               pLinecapactech(ltech)
 328                  pLinecost(l)
 329                  pH2Linecost(l)
 330                  pNMaxLine(l)
 331                  pNMaxH2Line(l)
 332  *               pPeakhtozone(peakH)
 333  *HOURLY RESERVE REQUIREMENTS [GW]
 334           pRegUpReqIncRE(renewtech,h)
 335           pFlexReqIncRE(renewtech,h)
 336  *RESERVE PROVISION PARAMETERS
 337           pRegeligibletech(tech)          candidate plant types eligible to provide reg reserves [0] or not [1]
 338           pFlexeligibletech(tech)
 339           pConteligibletech(tech)
 340           pMaxflexoffertech(tech)
 341           pMaxcontoffertech(tech)
 342           pMaxregupoffertech(tech)
 343  *PLANNING RESERVE
 344           pPlanningreserve                planning margin reserve capacity [GW]
 345           ;
 346   
GDXIN   C:\Users\atpha\Documents\Postdocs\Projects\BlueToZeroH2\Model\GAMS\_gams_py_gdb0.gdx
--- LOAD  ststorageegu = 52:ststorageegu
--- LOAD  ltstorageegu = 53:ltstorageegu
--- LOAD  tech = 54:tech
--- LOAD  dacstech = 72:dacstech
--- LOAD  thermaltech = 55:thermaltech
--- LOAD  CCStech = 59:CCStech
--- LOAD  nucleartech = 56:nucleartech
--- LOAD  srtech = 57:srtech
--- LOAD  CCtech = 58:CCtech
--- LOAD  renewtech = 66:renewtech
--- LOAD  solartech = 68:solartech
--- LOAD  windtech = 67:windtech
--- LOAD  storagetech = 69:storagetech
--- LOAD  ststoragetech = 70:ststoragetech
--- LOAD  ltstoragetech = 71:ltstoragetech
--- LOAD  peakH = 51:peakh
--- LOAD  h2tech = 60:h2tech
--- LOAD  electrolyzertech = 61:electrolyzertech
--- LOAD  SMRtech = 62:smrtech
--- LOAD  h2etech = 63:h2etech
--- LOAD  fuelcelltech = 64:fuelcelltech
--- LOAD  h2turbinetech = 65:h2turbinetech
--- LOAD  pNMaxWind = 91:pNMaxWind
--- LOAD  pNMaxSolar = 92:pNMaxSolar
--- LOAD  pNMaxNuclear = 93:pNMaxNuclear
--- LOAD  pNMaxSR = 94:pNMaxSR
--- LOAD  pNMaxCC = 96:pNMaxCC
--- LOAD  pNMaxCCS = 95:pNMaxCCS
--- LOAD  pNMaxDACS = 97:pNMaxDACS
--- LOAD  pPMaxSto = 98:pPMaxSto
--- LOAD  pEMaxSto = 99:pEMaxSto
--- LOAD  pCapactech = 83:pCapactech
--- LOAD  pHrtech = 79:pHrtech
--- LOAD  pOpcosttech = 82:pOpcosttech
--- LOAD  pNMaxSMR = 100:pNMaxSMR
--- LOAD  pNMaxElectrolyzer = 101:pNMaxElectrolyzer
--- LOAD  pNMaxFuelcell = 102:pNMaxFuelcell
--- LOAD  PNMaxH2Turbine = 103:PNMaxH2Turbine
--- LOAD  pNMaxH2Line = 115:pNMaxH2Line
--- LOAD  pH2Lifeline = 114:pH2Lifeline
--- LOAD  pH2Linecost = 113:pH2Linecost
--- LOAD  pFom = 85:pFom
--- LOAD  pOcc = 86:pOcc
--- LOAD  pPowOcc = 88:pPowOcc
--- LOAD  pEneOcc = 89:pEneOcc
--- LOAD  pRampratetech = 81:pRampratetech
--- LOAD  pCO2emratetech = 80:pCO2emratetech
--- LOAD  pEfficiencytech = 109:pEfficiencytech
--- LOAD  pCO2emcap = 75:pCO2emcap
--- LOAD  pCf = 90:pCf
--- LOAD  pR = 74:pR
--- LOAD  pLife = 87:pLife
--- LOAD  pLifeline = 112:pLifeline
--- LOAD  pGenzonetech = 84:pGenzonetech
--- LOAD  pLinecost = 110:pLinecost
--- LOAD  pNMaxLine = 111:pNMaxLine
--- LOAD  pRegUpReqIncRE = 104:pRegUpReqIncRE
--- LOAD  pFlexReqIncRE = 105:pFlexReqIncRE
--- LOAD  pFlexeligibletech = 107:pFlexeligibletech
--- LOAD  pConteligibletech = 108:pConteligibletech
--- LOAD  pRegeligibletech = 106:pRegeligibletech
--- LOAD  pPlanningreserve = 73:pPlanningreserve
 362   
 363  *DEFINE SET EXCLUSIONS
 364  nonrenewegu(egu) = not renewegu(egu);
 365  nonstoragetech(tech) = not storagetech(tech);
 366  notdacstech(tech) = not dacstech(tech);
 367  gentechs(tech) = not (dacstech(tech) + storagetech(tech));
 368  *CALCULATE CAPITAL RECOVERY FACTOR
 369  pCrf(tech) = pR / (1 - (1 / ( (1 + pR)**pLife(tech))));
 370  pCrfline = pR / (1 - (1 / ( (1 + pR)**pLifeline)));
 371  *CALCULATE PE RATIO FOR SHORTTERM STORAGE
 372  pPERatio(ststoragetech) = pEMaxSto(ststoragetech)/pPMaxSto(ststoragetech);
 373  *CALCULATE MAX RESERVE OFFERS
 374  pMaxflexoffertech(tech) = pFlexeligibletech(tech)*pRampratetech(tech)*pRampratetoflexreservescalar;
 375  pMaxcontoffertech(tech) = pConteligibletech(tech)*pRampratetech(tech)*pRampratetocontreservescalar;
 376  pMaxregupoffertech(tech) = pRegeligibletech(tech)*pRampratetech(tech)*pRampratetoregreservescalar;
 377   
 378  Variable
 379           vVarcosttech(tech,h)
 380           vVarcostannual                  total variable costs for new and existing plants = variable O&M + fuel + emission costs [thousandUSD per yr]
 381           vFixedcostannual                total investment costs for new plants = fixed O&M + overnight capital costs [thousandUSD per yr]
 382           vGentech(tech,h)                hourly electricity generation by new plants [GWh] or [ton]
 383  *Emission variables
 384           vCO2emstech(tech,h)
 385           vCO2emsannual                   co2 emissions in entire year from new and existing plants [short ton]
 386           ;
 387   
 388  Positive variables
 389  *Reserve requirements
 390           vRegupreserve(z,h)              amount of reg up reserves [GW]
 391           vFlexreserve(z,h)
 392  *Generation and reserve variables
 393           vReguptech(tech,h)              hourly reg up reserves provided by new plants [GWh]
 394           vFlextech(tech,h)
 395           vConttech(tech,h)
 396  *Storage
 397           vStateofchargetech(storagetech,h)              "energy stored in storage unit at end of hour h (GWh)"
 398           vChargetech(storagetech,h)                     "charged energy by storage unit in hour h (GWh)"
 399           vPowBuiltSto(storagetech)                     built power capacity for storage
 400           vEneBuiltSto(storagetech)                     built energy capacity for storage
 401  *Inputs for electrolyzers, fuel cells and H2 turbines:
 402           vELChargetech(electrolyzertech,h)               electricity input to power electrolyzer
 403           vH2TChargetech(h2etech,h)                       hydrogen input to power H2T tech (hydrogen turbines + fuel cells)
 404  *Line builds and flows
 405           vNl(l)
 406           vLinecapacnew(l)
 407           vNH2l(l)
 408           vH2Linecapacnew(l)
 409  *        vLinenewflow(ltech,h)
 410                     ;
 411   
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\BlueToZeroH2\Model\GAMS\CEBuildVariable.gms
 413  Positive Variable
 414          vN(tech)
 415          ;
 416   
 417  Equations
 418  *Costs
 419                  calcvarcoststech(tech,h)
 420                  investmentcost
 421  *Meet demand and reserves
 422           meetdemand(z,h)                   meet electricity supply with electrcity demand
 423           meeth2demand(z,h)                 meet h2 demand
 424           meetreservemargin                 meet planning reserve requirement with installed capacity
 425           setflexreserve(z,h)               determine quantity of required spin reserves
 426           setregupreserve(z,h)              determine quantity of required reg up reserves
 427           meetflexreserve(z,h)              meet spin reserve requirement
 428           meetcontreserve(z,h)              meet contingency reserve requirement
 429           meetregupreserve(z,h)             meet reg up reserve requirement
 430           limitshiftingdemandupper(z,h)     limit the amount of demand that can be shifted
 431           limitshiftingdemandlower(z,h)     limit the amount of demand that can be shifted
 432           meetshiftingdemand(z,h)
 433           limitLineFlows(l,h)
 434           limitH2LineFlows(l,h)
 435           linecapacnew(l,ll)
 436           h2linecapacnew(l,ll)
 437   
 438  *Maximum build constraints
 439                   maxSolar(solartech)
 440                   maxWind(windtech)
 441                   maxNuclear(nucleartech)
 442                   maxCCS(CCStech)
 443                   maxCC(CCtech)
 444                   maxDAC(dacstech)
 445                   maxPSto(storagetech)
 446                   setVNSto(storagetech)
 447                   maxELTSto(ltstoragetech)
 448                   maxESTSto(ststoragetech)
 449                                   maxL(l)
 450                                   maxH2l(l)
 451                   maxSR(srtech)
 452                   maxSMR(smrtech)
 453                   maxElectrolyzer(electrolyzertech)
 454                   maxFuelcell(fuelcelltech)
 455                   maxH2Turbine(h2turbinetech)
 456  *                 biLineLimit(l)
 457  *Carbon emissions
 458                  calcco2emstech(tech,h)
 459  *Limit of h2 output from electrolyzers
 460           electrolyzerconversiontech(electrolyzertech,h)
 461  *Limit of electricity output from fuel cells
 462           fuelcellconversiontech(fuelcelltech,h)
 463  *Limit of electricity output from h2 turbines
 464           h2turbineconversiontech(h2turbinetech,h)
 465           ;
 466   
 467  *****************CALCULATE COSTS*******************
 468  *Variable costs for new techs
 469  calcvarcoststech(tech,h).. vVarcosttech(tech,h) =e= vGentech(tech,h)*pOpcosttech(tech);
 470   
 471  *Fixed costs = annual fixed O&M + fixed annualized capital costs
 472  investmentcost..         vFixedcostannual =e= sum(nonstoragetech,vN(nonstoragetech)*pCapactech(nonstoragetech)*(pFom(nonstoragetech)+pOcc(nonstoragetech)*pCrf(nonstoragetech)))
 473                                                   + sum(storagetech,vPowBuiltSto(storagetech)*pPowOcc(storagetech)*pCrf(storagetech)+vEneBuiltSto(storagetech)*pEneOcc(storagetech)*pCrf(storagetech))
 474                                                   + sum(l,vNl(l)*pLinecost(l)*pCrfline) + sum(l,vNH2l(l)*pH2Linecost(l)*pCrfline);
 475   
 476  ***************************************************
 477   
 478  ******************SYSTEM-WIDE GENERATION AND RESERVE CONSTRAINTS******************* vH2TChargetech
 479  *Demand = generation by new and existing plants
 480  meetdemand(z,h)..          sum(thermaltech$[pGenzonetech(thermaltech)=ORD(z)],vGentech(thermaltech,h)) + sum(renewtech$[pGenzonetech(renewtech)=ORD(z)],vGentech(renewtech,h))
 481                                                          + sum(h2etech$[pGenzonetech(h2etech)=ORD(z)],vGentech(h2etech,h)) + sum(egenegu$[pGenzone(egenegu)=ORD(z)],vGen(egenegu,h))
 482                                                          + sum(l$[pLinesink(l)=ORD(z)],vLineflow(l,h))*pTransEff =g= (pDemand(z,h) + vShiftedDemand(z,h)
 483                                                          + sum(electrolyzertech$[pGenzonetech(electrolyzertech)=ORD(z)],vELChargetech(electrolyzertech,h))
 484                                                          + sum(electrolyzeregu$[pGenzone(electrolyzeregu)=ORD(z)],vELCharge(electrolyzeregu,h))
 485                                                          + sum(nonh2storageegu$[pGenzone(nonh2storageegu)=ORD(z)],vCharge(nonh2storageegu,h)) + sum(ststoragetech$[pGenzonetech(ststoragetech)=ORD(z)],vChargetech(ststoragetech,h))
 486                                                          + sum(l$[pLinesource(l)=ORD(z)],vLineflow(l,h)));
 487   
 488  meeth2demand(z,h)..          sum(h2tech$[pGenzonetech(h2tech)=ORD(z)],vGentech(h2tech,h)) + sum(h2egu$[pGenzone(h2egu)=ORD(z)],vGen(h2egu,h))
 489                                                          + sum(l$[pLinesink(l)=ORD(z)],vH2Lineflow(l,h)) =g= (pH2Demand(z,h)
 490                                                          + sum(h2etech$[pGenzonetech(h2etech)=ORD(z)],vH2TChargetech(h2etech,h)) + sum(h2eegu$[pGenzone(h2eegu)=ORD(z)],vH2TCharge(h2eegu,h))
 491                                                          + sum(h2storageegu$[pGenzone(h2storageegu)=ORD(z)],vCharge(h2storageegu,h)) + sum(ltstoragetech$[pGenzonetech(ltstoragetech)=ORD(z)],vChargetech(ltstoragetech,h))
 492                                                          + sum(l$[pLinesource(l)=ORD(z)],vH2Lineflow(l,h)));
 493   
 494  *meetdemand(z,h)..          sum(tech$[pGenzonetech(tech)=ORD(z)],vGentech(tech,h)) + sum(egu$[pGenzone(egu)=ORD(z)],vGen(egu,h)) =g= pDemand(z,h);
 495   
 496  *Demand response
 497  limitshiftingdemandupper(z,h)..       vShiftedDemand(z,h) =l= pDemand(z,h)*pDemandShifter;
 498  limitshiftingdemandlower(z,h)..       vShiftedDemand(z,h) =g= -1*pDemand(z,h)*pDemandShifter;
 499  meetshiftingdemand(z,h)$(mod(ord(h),pDemandShiftingBlock)=1).. sum(hh$((ord(hh)>=ord(h) and (ord(hh)<=ord(h)+pDemandShiftingBlock-1))), vShiftedDemand(z,h))=e= 0;
 500   
 501  *Meet planning reserve margin
 502  meetreservemargin..        sum(thermaltech,pCapactech(thermaltech)*vN(thermaltech))
 503                             + sum(storagetech,vPowBuiltSto(storagetech))
 504                             + sum((renewtech,peakH),pCapactech(renewtech)*vN(renewtech)*pCf(renewtech,peakH))
 505                             + sum(nonrenewegu,pCapac(nonrenewegu))
 506                             + sum((z,peakH),pMaxgenwind(z,peakH) + pMaxgensolar(z,peakH)) =g= pPlanningreserve;
 507   
 508  *Define spinning and reg reserve requirement based on new builds
 509  setflexreserve(z,h)..      sum(renewtech$[pGenzonetech(renewtech)=ORD(z)],vN(renewtech)*pCapactech(renewtech)*pFlexReqIncRE(renewtech,h)) + pFlexreserves(z,h) =e= vFlexreserve(z,h);
 510  setregupreserve(z,h)..     sum(renewtech$[pGenzonetech(renewtech)=ORD(z)],vN(renewtech)*pCapactech(renewtech)*pRegUpReqIncRE(renewtech,h)) + pRegupreserves(z,h) =e= vRegupreserve(z,h);
 511   
 512  *Meet spinning and regulation reserve requirements
 513  meetflexreserve(z,h)..     sum(tech$[pGenzonetech(tech)=ORD(z)],vFlextech(tech,h)) + sum(egu$[pGenzone(egu)=ORD(z)],vFlex(egu,h)) =g= vFlexreserve(z,h);
 514  meetcontreserve(z,h)..     sum(tech$[pGenzonetech(tech)=ORD(z)],vConttech(tech,h)) + sum(egu$[pGenzone(egu)=ORD(z)],vCont(egu,h)) =g= pContreserves(z,h);
 515  meetregupreserve(z,h)..    sum(tech$[pGenzonetech(tech)=ORD(z)],vReguptech(tech,h)) + sum(egu$[pGenzone(egu)=ORD(z)],vRegup(egu,h)) =g= vRegupreserve(z,h);
 516   
 517  *Limit line flows on new lines
 518  linecapacnew(l,ll)$(pLinesource(l)=pLinesink(ll) and pLinesource(ll)=pLinesink(l)).. vLinecapacnew(l) =e= vNl(l) + vNl(ll);
 519  limitLineFlows(l,h).. pLinecapac(l)+vLinecapacnew(l) =g= vLineflow(l,h);
 520  h2linecapacnew(l,ll)$(pLinesource(l)=pLinesink(ll) and pLinesource(ll)=pLinesink(l)).. vH2Linecapacnew(l) =e= vNH2l(l) + vNH2l(ll);
 521  limitH2LineFlows(l,h).. pH2Linecapac(l)+vH2Linecapacnew(l) =g= vH2Lineflow(l,h);
 522  *new lines with same sources and sinks have the same capacity:
 523  *biLineLimit(l,ll)$(pLinesource(l)=pLinesink(ll) and pLinesource(ll)=pLinesink(l)).. vNl(l) =e= vNl(ll);
 524  ***********************************************************************************
 525   
 526  *************UPPER AND LOWER GENERATION BOUNDS*****
 527  *Set lower bound to zero for generation by storage and generating techs.
 528  vGentech.lo(notdacstech,h) = 0;
 529  *Set upper bound to zero for DACS techs. DACS max capacity is negative and has negative vGen values.
 530  vGentech.up(dacstech,h) = 0;
 531  ***************************************************
 532   
 533   
 534  ******************ELECTROLYZER CONSTRAINT******************
 535  electrolyzerconversiontech(electrolyzertech,h)..   vELChargetech(electrolyzertech,h) =e= vGentech(electrolyzertech,h)*pElectrolyzerCon;
 536  ************************************************************
 537   
 538  ******************FUEL CELL CONSTRAINT******************
 539  fuelcellconversiontech(fuelcelltech,h)..   vH2TChargetech(fuelcelltech,h) =e= vGentech(fuelcelltech,h)*pFuelCellCon;
 540  ************************************************************
 541   
 542  ******************H2 TURBINE CONSTRAINT******************
 543  h2turbineconversiontech(h2turbinetech,h)..   vH2TChargetech(h2turbinetech,h) =e= vGentech(h2turbinetech,h)*pH2TurbineCon;
 544  ************************************************************
 545   
 546  ******************BUILD DECISIONS******************
 547  *Limit number builds to input value.
 548  maxWind(windtech) .. vN(windtech) =l= pNMaxWind;
 549  maxSolar(solartech) .. vN(solartech) =l= pNMaxSolar;
 550  maxNuclear(nucleartech) .. vN(nucleartech) =l= pNMaxNuclear;
 551  maxCCS(CCStech) .. vN(CCStech) =l= pNMaxCCS(CCStech);
 552  maxCC(CCtech) .. vN(CCtech) =l= pNMaxCC;
 553  maxDAC(dacstech) .. vN(dacstech) =l= pNMaxDACS(dacstech);
 554  maxPSto(storagetech) .. vPowBuiltSto(storagetech) =l= pPMaxSto(storagetech);
 555  setVNSto(storagetech) .. vN(storagetech) =e= vPowBuiltSto(storagetech)/pCapactech(storagetech);
 556  maxELTSto(ltstoragetech) .. vEneBuiltSto(ltstoragetech) =l= pEMaxSto(ltstoragetech);
 557  maxESTSto(ststoragetech) .. vEneBuiltSto(ststoragetech) =e= pPERatio(ststoragetech)*vPowBuiltSto(ststoragetech);
 558  maxL(l) .. vNl(l) =l= pNMaxLine(l);
 559  maxH2L(l) .. vNH2l(l) =l= pNMaxH2Line(l);
 560  maxSR(srtech) .. vN(srtech) =l= pNMaxSR;
 561  maxSMR(smrtech) .. vN(smrtech) =l= pNMaxSMR(smrtech);
 562  maxElectrolyzer(electrolyzertech) .. vN(electrolyzertech) =l= pNMaxElectrolyzer(electrolyzertech);
 563  maxFuelcell(fuelcelltech) .. vN(fuelcelltech) =l= pNMaxFuelcell;
 564  maxH2Turbine(h2turbinetech) .. vN(h2turbinetech) =l= pNMaxH2Turbine;
 565   
 566  ***************************************************
 567   
 568  ******************RESERVE CONSTRAINTS******************
 569  vFlextech.fx(tech,h)$[pMaxflexoffertech(tech)=0] = 0;
 570  vConttech.fx(tech,h)$[pMaxcontoffertech(tech)=0] = 0;
 571  vReguptech.fx(tech,h)$[pMaxregupoffertech(tech)=0] = 0;
 572  *******************************************************
 573   
 574  ********CALCULATE CO2 EMISSIONS*************
 575  calcco2emstech(tech,h).. vCO2emstech(tech,h) =e= vGentech(tech,h)*pHrtech(tech)*pCO2emratetech(tech);
 576  ********************************************
 577   
 578   
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\BlueToZeroH2\Model\GAMS\StorageEDModule.gms
 580  *Michael Craig 14 May 2020
 581   
 582  Equations
 583  *Limit storage generation plus up reserves
 584                   limitstorageresup(storageegu,h)
 585                  ;
 586   
 587  ******************STORAGE CONSTRAINTS*********************************
 588  *Limit up reserves to spare capacity while discharging & to charge amount while charging
 589  limitstorageresup(storageegu,h) .. vRegup(storageegu,h) + vFlex(storageegu,h) + vCont(storageegu,h) =l= (pCapac(storageegu) - vGen(storageegu,h)) + vCharge(storageegu,h);
 590  **********************************************************************
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\BlueToZeroH2\Model\GAMS\EDVarsAndConstraints.gms
 592  *Michael Craig 14 May 2020
 593   
 594  Equations
 595  *Generation and reserve constraints
 596           limitflexres(egu,h)             limit spin reserves by existing plants by ramp rate
 597           limitcontres(egu,h)             limit cont reserves by existing plants by ramp rate
 598           limitregupres(egu,h)            limit reg reserves by existing plants by ramp rate
 599           ;
 600   
 601  ******************GENERATION AND RESERVE CONSTRAINTS******************
 602  *Limit spining and regulation reserves each to ramp capability and time of reserve
 603  limitflexres(egu,h)$[pMaxflexoffer(egu)>0] .. vFlex(egu,h) =l= pMaxflexoffer(egu);
 604  limitcontres(egu,h)$[pMaxcontoffer(egu)>0] .. vCont(egu,h) =l= pMaxcontoffer(egu);
 605  limitregupres(egu,h)$[pMaxregupoffer(egu)>0] .. vRegup(egu,h) =l= pMaxregupoffer(egu);
 606  **********************************************************************
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\BlueToZeroH2\Model\GAMS\CETimeDependentConstraints.gms
 608  Sets
 609          block0h(h)
 610          block1h(h)
 611          blockpeaktotal2h(h)
 612          blockpeaknet3h(h)
 613          block4h(h)
 614          blockpeaknetramp5h(h)
 615          block6h(h)
 616          ;
 617   
 618  Parameters
 619          pWeightblock0h
 620          pWeightblock1h
 621          pWeightblockpeaktotal2h
 622          pWeightblockpeaknet3h
 623          pWeightblock4h
 624          pWeightblockpeaknetramp5h
 625          pWeightblock6h
 626          pInitSOC(storageegu)
 627          pInitSOCtech(storagetech)
 628          pHourInitblock0h
 629          pHourFinalblock0h
 630          pHourInitblock1h
 631          pHourFinalblock1h
 632          pSOCScalarblock1h
 633          pHourInitblockpeaktotal2h
 634          pHourFinalblockpeaktotal2h
 635          pSOCScalarblockpeaktotal2h
 636          pHourInitblockpeaknet3h
 637          pHourFinalblockpeaknet3h
 638          pSOCScalarblockpeaknet3h
 639          pHourInitblock4h
 640          pHourFinalblock4h
 641          pSOCScalarblock4h
 642          pHourInitblockpeaknetramp5h
 643          pHourFinalblockpeaknetramp5h
 644          pSOCScalarblockpeaknetramp5h
 645          pHourInitblock6h
 646          pHourFinalblock6h
 647          pSOCScalarblock6h
 648          pMaxgenhydroblock0h(z)
 649          pMaxgenhydroblock1h(z)
 650          pMaxgenhydroblockpeaktotal2h(z)
 651          pMaxgenhydroblockpeaknet3h(z)
 652          pMaxgenhydroblock4h(z)
 653          pMaxgenhydroblockpeaknetramp5h(z)
 654          pMaxgenhydroblock6h(z)
 655          ;
 656   
GDXIN   C:\Users\atpha\Documents\Postdocs\Projects\BlueToZeroH2\Model\GAMS\_gams_py_gdb0.gdx
--- LOAD  block0h = 116:block0h
--- LOAD  block1h = 117:block1h
--- LOAD  blockpeaktotal2h = 118:blockpeaktotal2h
--- LOAD  blockpeaknet3h = 119:blockpeaknet3h
--- LOAD  block4h = 120:block4h
--- LOAD  blockpeaknetramp5h = 121:blockpeaknetramp5h
--- LOAD  block6h = 122:block6h
--- LOAD  pWeightblock0h = 123:pWeightblock0h
--- LOAD  pWeightblock1h = 124:pWeightblock1h
--- LOAD  pWeightblockpeaktotal2h = 125:pWeightblockpeaktotal2h
--- LOAD  pWeightblockpeaknet3h = 126:pWeightblockpeaknet3h
--- LOAD  pWeightblock4h = 127:pWeightblock4h
--- LOAD  pWeightblockpeaknetramp5h = 128:pWeightblockpeaknetramp5h
--- LOAD  pWeightblock6h = 129:pWeightblock6h
--- LOAD  pSOCScalarblock1h = 130:pSOCScalarblock1h
--- LOAD  pSOCScalarblockpeaktotal2h = 131:pSOCScalarblockpeaktotal2h
--- LOAD  pSOCScalarblockpeaknet3h = 132:pSOCScalarblockpeaknet3h
--- LOAD  pSOCScalarblock4h = 133:pSOCScalarblock4h
--- LOAD  pSOCScalarblockpeaknetramp5h = 134:pSOCScalarblockpeaknetramp5h
--- LOAD  pSOCScalarblock6h = 135:pSOCScalarblock6h
--- LOAD  pInitSOC = 136:pInitSOC
--- LOAD  pInitSOCtech = 137:pInitSOCtech
--- LOAD  pMaxgenhydroblock0h = 138:pMaxgenhydroblock0h
--- LOAD  pMaxgenhydroblock1h = 139:pMaxgenhydroblock1h
--- LOAD  pMaxgenhydroblockpeaktotal2h = 144:pMaxgenhydroblockpeaktotal2h
--- LOAD  pMaxgenhydroblockpeaknet3h = 142:pMaxgenhydroblockpeaknet3h
--- LOAD  pMaxgenhydroblock4h = 140:pMaxgenhydroblock4h
--- LOAD  pMaxgenhydroblockpeaknetramp5h = 143:pMaxgenhydroblockpeaknetramp5h
--- LOAD  pMaxgenhydroblock6h = 141:pMaxgenhydroblock6h
 665   
 666  pHourInitblock0h = smin(h$block0h(h),ord(h));
 667  pHourFinalblock0h = smax(h$block0h(h),ord(h));
 668  pHourInitblock1h = smin(h$block1h(h),ord(h));
 669  pHourFinalblock1h = smax(h$block1h(h),ord(h));
 670  pHourInitblockpeaktotal2h = smin(h$blockpeaktotal2h(h),ord(h));
 671  pHourFinalblockpeaktotal2h = smax(h$blockpeaktotal2h(h),ord(h));
 672  pHourInitblockpeaknet3h = smin(h$blockpeaknet3h(h),ord(h));
 673  pHourFinalblockpeaknet3h = smax(h$blockpeaknet3h(h),ord(h));
 674  pHourInitblock4h = smin(h$block4h(h),ord(h));
 675  pHourFinalblock4h = smax(h$block4h(h),ord(h));
 676  pHourInitblockpeaknetramp5h = smin(h$blockpeaknetramp5h(h),ord(h));
 677  pHourFinalblockpeaknetramp5h = smax(h$blockpeaknetramp5h(h),ord(h));
 678  pHourInitblock6h = smin(h$block6h(h),ord(h));
 679  pHourFinalblock6h = smax(h$block6h(h),ord(h));
 680   
 681  nonInitH(h)= yes;
 682  nonInitH(h)$[ord(h)=pHourInitblock0h] = no;
 683  nonInitH(h)$[ord(h)=pHourInitblock1h] = no;
 684  nonInitH(h)$[ord(h)=pHourInitblockpeaktotal2h] = no;
 685  nonInitH(h)$[ord(h)=pHourInitblockpeaknet3h] = no;
 686  nonInitH(h)$[ord(h)=pHourInitblock4h] = no;
 687  nonInitH(h)$[ord(h)=pHourInitblockpeaknetramp5h] = no;
 688  nonInitH(h)$[ord(h)=pHourInitblock6h] = no;
 689   
 690  Variables
 691          vInitSOCblock1h(storageegu)
 692          vInitSOCblockpeaktotal2h(storageegu)
 693          vInitSOCblockpeaknet3h(storageegu)
 694          vInitSOCblock4h(storageegu)
 695          vInitSOCblockpeaknetramp5h(storageegu)
 696          vInitSOCblock6h(storageegu)
 697          vInitSOCblock1htech(storagetech)
 698          vInitSOCblockpeaktotal2htech(storagetech)
 699          vInitSOCblockpeaknet3htech(storagetech)
 700          vInitSOCblock4htech(storagetech)
 701          vInitSOCblockpeaknetramp5htech(storagetech)
 702          vInitSOCblock6htech(storagetech)
 703          vFinalSOCblock0h(storageegu)
 704          vFinalSOCblock1h(storageegu)
 705          vFinalSOCblockpeaktotal2h(storageegu)
 706          vFinalSOCblockpeaknet3h(storageegu)
 707          vFinalSOCblock4h(storageegu)
 708          vFinalSOCblockpeaknetramp5h(storageegu)
 709          vFinalSOCblock6h(storageegu)
 710          vFinalSOCblock0htech(storagetech)
 711          vFinalSOCblock1htech(storagetech)
 712          vFinalSOCblockpeaktotal2htech(storagetech)
 713          vFinalSOCblockpeaknet3htech(storagetech)
 714          vFinalSOCblock4htech(storagetech)
 715          vFinalSOCblockpeaknetramp5htech(storagetech)
 716          vFinalSOCblock6htech(storagetech)
 717          vChangeSOCblock0h(storageegu)
 718          vChangeSOCblock1h(storageegu)
 719          vChangeSOCblockpeaktotal2h(storageegu)
 720          vChangeSOCblockpeaknet3h(storageegu)
 721          vChangeSOCblock4h(storageegu)
 722          vChangeSOCblockpeaknetramp5h(storageegu)
 723          vChangeSOCblock6h(storageegu)
 724          vChangeSOCblock0htech(storagetech)
 725          vChangeSOCblock1htech(storagetech)
 726          vChangeSOCblockpeaktotal2htech(storagetech)
 727          vChangeSOCblockpeaknet3htech(storagetech)
 728          vChangeSOCblock4htech(storagetech)
 729          vChangeSOCblockpeaknetramp5htech(storagetech)
 730          vChangeSOCblock6htech(storagetech)
 731          ;
 732   
 733  Equations
 734          varCost
 735          co2Ems
 736          defSOC(storageegu,h)
 737          genPlusUpResToSOC(storageegu,h)
 738          setInitSOCblock1hltstorageegu(ltstorageegu)
 739          setInitSOCblockpeaktotal2hltstorageegu(ltstorageegu)
 740          setInitSOCblockpeaknet3hltstorageegu(ltstorageegu)
 741          setInitSOCblock4hltstorageegu(ltstorageegu)
 742          setInitSOCblockpeaknetramp5hltstorageegu(ltstorageegu)
 743          setInitSOCblock6hltstorageegu(ltstorageegu)
 744          defFinalSOCblock0h(storageegu,h)
 745          defChangeSOCblock0h(storageegu)
 746          defFinalSOCblock1h(storageegu,h)
 747          defChangeSOCblock1h(storageegu)
 748          defFinalSOCblockpeaktotal2h(storageegu,h)
 749          defChangeSOCblockpeaktotal2h(storageegu)
 750          defFinalSOCblockpeaknet3h(storageegu,h)
 751          defChangeSOCblockpeaknet3h(storageegu)
 752          defFinalSOCblock4h(storageegu,h)
 753          defChangeSOCblock4h(storageegu)
 754          defFinalSOCblockpeaknetramp5h(storageegu,h)
 755          defChangeSOCblockpeaknetramp5h(storageegu)
 756          defFinalSOCblock6h(storageegu,h)
 757          defChangeSOCblock6h(storageegu)
 758          setInitSOCblock1hststorageegu(ststorageegu)
 759          setInitSOCblockpeaktotal2hststorageegu(ststorageegu)
 760          setInitSOCblockpeaknet3hststorageegu(ststorageegu)
 761          setInitSOCblock4hststorageegu(ststorageegu)
 762          setInitSOCblockpeaknetramp5hststorageegu(ststorageegu)
 763          setInitSOCblock6hststorageegu(ststorageegu)
 764          defSOCtech(storagetech,h)
 765          genPlusUpResToSOCtech(storagetech,h)
 766          setInitSOCblock1hltstoragetech(ltstoragetech)
 767          setInitSOCblockpeaktotal2hltstoragetech(ltstoragetech)
 768          setInitSOCblockpeaknet3hltstoragetech(ltstoragetech)
 769          setInitSOCblock4hltstoragetech(ltstoragetech)
 770          setInitSOCblockpeaknetramp5hltstoragetech(ltstoragetech)
 771          setInitSOCblock6hltstoragetech(ltstoragetech)
 772          defFinalSOCblock0htech(storagetech,h)
 773          defChangeSOCblock0htech(storagetech)
 774          defFinalSOCblock1htech(storagetech,h)
 775          defChangeSOCblock1htech(storagetech)
 776          defFinalSOCblockpeaktotal2htech(storagetech,h)
 777          defChangeSOCblockpeaktotal2htech(storagetech)
 778          defFinalSOCblockpeaknet3htech(storagetech,h)
 779          defChangeSOCblockpeaknet3htech(storagetech)
 780          defFinalSOCblock4htech(storagetech,h)
 781          defChangeSOCblock4htech(storagetech)
 782          defFinalSOCblockpeaknetramp5htech(storagetech,h)
 783          defChangeSOCblockpeaknetramp5htech(storagetech)
 784          defFinalSOCblock6htech(storagetech,h)
 785          defChangeSOCblock6htech(storagetech)
 786          setInitSOCblock1hststoragetech(ststoragetech)
 787          setInitSOCblockpeaktotal2hststoragetech(ststoragetech)
 788          setInitSOCblockpeaknet3hststoragetech(ststoragetech)
 789          setInitSOCblock4hststoragetech(ststoragetech)
 790          setInitSOCblockpeaknetramp5hststoragetech(ststoragetech)
 791          setInitSOCblock6hststoragetech(ststoragetech)
 792          rampUpblock0h(egu,block0h)
 793          rampUpblock1h(egu,block1h)
 794          rampUpblockpeaktotal2h(egu,blockpeaktotal2h)
 795          rampUpblockpeaknet3h(egu,blockpeaknet3h)
 796          rampUpblock4h(egu,block4h)
 797          rampUpblockpeaknetramp5h(egu,blockpeaknetramp5h)
 798          rampUpblock6h(egu,block6h)
 799          rampUpblock0htech(tech,block0h)
 800          rampUpblock1htech(tech,block1h)
 801          rampUpblockpeaktotal2htech(tech,blockpeaktotal2h)
 802          rampUpblockpeaknet3htech(tech,blockpeaknet3h)
 803          rampUpblock4htech(tech,block4h)
 804          rampUpblockpeaknetramp5htech(tech,blockpeaknetramp5h)
 805          rampUpblock6htech(tech,block6h)
 806          limitHydroGenblock0h(z)
 807          limitHydroGenblock1h(z)
 808          limitHydroGenblockpeaktotal2h(z)
 809          limitHydroGenblockpeaknet3h(z)
 810          limitHydroGenblock4h(z)
 811          limitHydroGenblockpeaknetramp5h(z)
 812          limitHydroGenblock6h(z)
 813          ;
 814   
 815  defSOC(storageegu,h).. vStateofcharge(storageegu,h) =e= pInitSOC(storageegu)$[ord(h)=pHourInitblock0h] + vInitSOCblock1h(storageegu)$[ord(h)=pHourInitblock1h] + vInitSOCblockpeaktotal2h(storageegu)$[ord(h)=pHourInitblockpeaktotal2h] + vInitSOCblockpeaknet3h(storageegu)$[ord(h)=pHourInitblockpeaknet3h] + vInitSOCblock4h(storageegu)$[ord(h)=pHourInitblock4h] + vInitSOCblockpeaknetramp5h(storageegu)$[ord(h)=pHourInitblockpeaknetramp5h] + vInitSOCblock6h(storageegu)$[ord(h)=pHourInitblock6h] +
 816          vStateofcharge(storageegu, h-1)$nonInitH(h) -
 817                 1/sqrt(pEfficiency(storageegu)) * vGen(storageegu,h) +
 818                 sqrt(pEfficiency(storageegu)) * vCharge(storageegu,h);
 819  genPlusUpResToSOC(storageegu,h).. vGen(storageegu,h)+vRegup(storageegu,h)+vFlex(storageegu,h)+vCont(storageegu,h) =l= vStateofcharge(storageegu, h-1)$nonInitH(h)
 820                       + pInitSOC(storageegu)$[ord(h)=pHourInitblock0h] + vInitSOCblock1h(storageegu)$[ord(h)=pHourInitblock1h] + vInitSOCblockpeaktotal2h(storageegu)$[ord(h)=pHourInitblockpeaktotal2h] + vInitSOCblockpeaknet3h(storageegu)$[ord(h)=pHourInitblockpeaknet3h] + vInitSOCblock4h(storageegu)$[ord(h)=pHourInitblock4h] + vInitSOCblockpeaknetramp5h(storageegu)$[ord(h)=pHourInitblockpeaknetramp5h] + vInitSOCblock6h(storageegu)$[ord(h)=pHourInitblock6h];
 821  setInitSOCblock1hltstorageegu(ltstorageegu).. vInitSOCblock1h(ltstorageegu) =e= vFinalSOCblock0h(ltstorageegu) + vChangeSOCblock0h(ltstorageegu)*pSOCScalarblock1h
 822                          ;
 823  setInitSOCblockpeaktotal2hltstorageegu(ltstorageegu).. vInitSOCblockpeaktotal2h(ltstorageegu) =e= vFinalSOCblock1h(ltstorageegu) + vChangeSOCblock1h(ltstorageegu)*pSOCScalarblockpeaktotal2h
 824                          ;
 825  setInitSOCblockpeaknet3hltstorageegu(ltstorageegu).. vInitSOCblockpeaknet3h(ltstorageegu) =e= vFinalSOCblock1h(ltstorageegu) + vChangeSOCblock1h(ltstorageegu)*pSOCScalarblockpeaknet3h + vChangeSOCblockpeaktotal2h(ltstorageegu)
 826                          ;
 827  setInitSOCblock4hltstorageegu(ltstorageegu).. vInitSOCblock4h(ltstorageegu) =e= vFinalSOCblock1h(ltstorageegu) + vChangeSOCblock1h(ltstorageegu)*pSOCScalarblock4h + vChangeSOCblockpeaktotal2h(ltstorageegu)+ vChangeSOCblockpeaknet3h(ltstorageegu)
 828                          ;
 829  setInitSOCblockpeaknetramp5hltstorageegu(ltstorageegu).. vInitSOCblockpeaknetramp5h(ltstorageegu) =e= vFinalSOCblock4h(ltstorageegu) + vChangeSOCblock4h(ltstorageegu)*pSOCScalarblockpeaknetramp5h
 830                          ;
 831  setInitSOCblock6hltstorageegu(ltstorageegu).. vInitSOCblock6h(ltstorageegu) =e= vFinalSOCblock4h(ltstorageegu) + vChangeSOCblock4h(ltstorageegu)*pSOCScalarblock6h + vChangeSOCblockpeaknetramp5h(ltstorageegu)
 832                          ;
 833  defFinalSOCblock0h(ltstorageegu,h)$[ord(h)=pHourFinalblock0h].. vFinalSOCblock0h(ltstorageegu) =e=
 834                             vStateofcharge(ltstorageegu,h);
 835  defChangeSOCblock0h(ltstorageegu).. vChangeSOCblock0h(ltstorageegu) =e= vFinalSOCblock0h(ltstorageegu)
 836                                - pInitSOC(ltstorageegu);
 837  defFinalSOCblock1h(ltstorageegu,h)$[ord(h)=pHourFinalblock1h].. vFinalSOCblock1h(ltstorageegu) =e=
 838                             vStateofcharge(ltstorageegu,h);
 839  defChangeSOCblock1h(ltstorageegu).. vChangeSOCblock1h(ltstorageegu) =e= vFinalSOCblock1h(ltstorageegu)
 840                                - vInitSOCblock1h(ltstorageegu);
 841  defFinalSOCblockpeaktotal2h(ltstorageegu,h)$[ord(h)=pHourFinalblockpeaktotal2h].. vFinalSOCblockpeaktotal2h(ltstorageegu) =e=
 842                             vStateofcharge(ltstorageegu,h);
 843  defChangeSOCblockpeaktotal2h(ltstorageegu).. vChangeSOCblockpeaktotal2h(ltstorageegu) =e= vFinalSOCblockpeaktotal2h(ltstorageegu)
 844                                - vInitSOCblockpeaktotal2h(ltstorageegu);
 845  defFinalSOCblockpeaknet3h(ltstorageegu,h)$[ord(h)=pHourFinalblockpeaknet3h].. vFinalSOCblockpeaknet3h(ltstorageegu) =e=
 846                             vStateofcharge(ltstorageegu,h);
 847  defChangeSOCblockpeaknet3h(ltstorageegu).. vChangeSOCblockpeaknet3h(ltstorageegu) =e= vFinalSOCblockpeaknet3h(ltstorageegu)
 848                                - vInitSOCblockpeaknet3h(ltstorageegu);
 849  defFinalSOCblock4h(ltstorageegu,h)$[ord(h)=pHourFinalblock4h].. vFinalSOCblock4h(ltstorageegu) =e=
 850                             vStateofcharge(ltstorageegu,h);
 851  defChangeSOCblock4h(ltstorageegu).. vChangeSOCblock4h(ltstorageegu) =e= vFinalSOCblock4h(ltstorageegu)
 852                                - vInitSOCblock4h(ltstorageegu);
 853  defFinalSOCblockpeaknetramp5h(ltstorageegu,h)$[ord(h)=pHourFinalblockpeaknetramp5h].. vFinalSOCblockpeaknetramp5h(ltstorageegu) =e=
 854                             vStateofcharge(ltstorageegu,h);
 855  defChangeSOCblockpeaknetramp5h(ltstorageegu).. vChangeSOCblockpeaknetramp5h(ltstorageegu) =e= vFinalSOCblockpeaknetramp5h(ltstorageegu)
 856                                - vInitSOCblockpeaknetramp5h(ltstorageegu);
 857  defFinalSOCblock6h(ltstorageegu,h)$[ord(h)=pHourFinalblock6h].. vFinalSOCblock6h(ltstorageegu) =e=
 858                             vStateofcharge(ltstorageegu,h);
 859  defChangeSOCblock6h(ltstorageegu).. vChangeSOCblock6h(ltstorageegu) =e= vFinalSOCblock6h(ltstorageegu)
 860                                - vInitSOCblock6h(ltstorageegu);
 861  setInitSOCblock1hststorageegu(ststorageegu).. vInitSOCblock1h(ststorageegu) =e=
 862                                      pInitSOC(ststorageegu);
 863  setInitSOCblockpeaktotal2hststorageegu(ststorageegu).. vInitSOCblockpeaktotal2h(ststorageegu) =e=
 864                                      pInitSOC(ststorageegu);
 865  setInitSOCblockpeaknet3hststorageegu(ststorageegu).. vInitSOCblockpeaknet3h(ststorageegu) =e=
 866                                      pInitSOC(ststorageegu);
 867  setInitSOCblock4hststorageegu(ststorageegu).. vInitSOCblock4h(ststorageegu) =e=
 868                                      pInitSOC(ststorageegu);
 869  setInitSOCblockpeaknetramp5hststorageegu(ststorageegu).. vInitSOCblockpeaknetramp5h(ststorageegu) =e=
 870                                      pInitSOC(ststorageegu);
 871  setInitSOCblock6hststorageegu(ststorageegu).. vInitSOCblock6h(ststorageegu) =e=
 872                                      pInitSOC(ststorageegu);
 873   
 874  defSOCtech(storagetech,h).. vStateofchargetech(storagetech,h) =e= pInitSOCtech(storagetech)$[ord(h)=pHourInitblock0h]*vEneBuiltSto(storagetech) + vInitSOCblock1htech(storagetech)$[ord(h)=pHourInitblock1h] + vInitSOCblockpeaktotal2htech(storagetech)$[ord(h)=pHourInitblockpeaktotal2h] + vInitSOCblockpeaknet3htech(storagetech)$[ord(h)=pHourInitblockpeaknet3h] + vInitSOCblock4htech(storagetech)$[ord(h)=pHourInitblock4h] + vInitSOCblockpeaknetramp5htech(storagetech)$[ord(h)=pHourInitblockpeaknetramp5h] + vInitSOCblock6htech(storagetech)$[ord(h)=pHourInitblock6h] +
 875          vStateofchargetech(storagetech, h-1)$nonInitH(h) -
 876                 1/sqrt(pEfficiencytech(storagetech)) * vGentech(storagetech,h) +
 877                 sqrt(pEfficiencytech(storagetech)) * vChargetech(storagetech,h);
 878  genPlusUpResToSOCtech(storagetech,h).. vGentech(storagetech,h)+vReguptech(storagetech,h)+vFlextech(storagetech,h)+vConttech(storagetech,h) =l= vStateofchargetech(storagetech, h-1)$nonInitH(h)
 879                       + pInitSOCtech(storagetech)$[ord(h)=pHourInitblock0h]*vEneBuiltSto(storagetech) + vInitSOCblock1htech(storagetech)$[ord(h)=pHourInitblock1h] + vInitSOCblockpeaktotal2htech(storagetech)$[ord(h)=pHourInitblockpeaktotal2h] + vInitSOCblockpeaknet3htech(storagetech)$[ord(h)=pHourInitblockpeaknet3h] + vInitSOCblock4htech(storagetech)$[ord(h)=pHourInitblock4h] + vInitSOCblockpeaknetramp5htech(storagetech)$[ord(h)=pHourInitblockpeaknetramp5h] + vInitSOCblock6htech(storagetech)$[ord(h)=pHourInitblock6h];
 880  setInitSOCblock1hltstoragetech(ltstoragetech).. vInitSOCblock1htech(ltstoragetech) =e= vFinalSOCblock0htech(ltstoragetech) + vChangeSOCblock0htech(ltstoragetech)*pSOCScalarblock1h
 881                          ;
 882  setInitSOCblockpeaktotal2hltstoragetech(ltstoragetech).. vInitSOCblockpeaktotal2htech(ltstoragetech) =e= vFinalSOCblock1htech(ltstoragetech) + vChangeSOCblock1htech(ltstoragetech)*pSOCScalarblockpeaktotal2h
 883                          ;
 884  setInitSOCblockpeaknet3hltstoragetech(ltstoragetech).. vInitSOCblockpeaknet3htech(ltstoragetech) =e= vFinalSOCblock1htech(ltstoragetech) + vChangeSOCblock1htech(ltstoragetech)*pSOCScalarblockpeaknet3h + vChangeSOCblockpeaktotal2htech(ltstoragetech)
 885                          ;
 886  setInitSOCblock4hltstoragetech(ltstoragetech).. vInitSOCblock4htech(ltstoragetech) =e= vFinalSOCblock1htech(ltstoragetech) + vChangeSOCblock1htech(ltstoragetech)*pSOCScalarblock4h + vChangeSOCblockpeaktotal2htech(ltstoragetech)+ vChangeSOCblockpeaknet3htech(ltstoragetech)
 887                          ;
 888  setInitSOCblockpeaknetramp5hltstoragetech(ltstoragetech).. vInitSOCblockpeaknetramp5htech(ltstoragetech) =e= vFinalSOCblock4htech(ltstoragetech) + vChangeSOCblock4htech(ltstoragetech)*pSOCScalarblockpeaknetramp5h
 889                          ;
 890  setInitSOCblock6hltstoragetech(ltstoragetech).. vInitSOCblock6htech(ltstoragetech) =e= vFinalSOCblock4htech(ltstoragetech) + vChangeSOCblock4htech(ltstoragetech)*pSOCScalarblock6h + vChangeSOCblockpeaknetramp5htech(ltstoragetech)
 891                          ;
 892  defFinalSOCblock0htech(ltstoragetech,h)$[ord(h)=pHourFinalblock0h].. vFinalSOCblock0htech(ltstoragetech) =e=
 893                             vStateofchargetech(ltstoragetech,h);
 894  defChangeSOCblock0htech(ltstoragetech).. vChangeSOCblock0htech(ltstoragetech) =e= vFinalSOCblock0htech(ltstoragetech)
 895                                - pInitSOCtech(ltstoragetech)*vEneBuiltSto(ltstoragetech);
 896  defFinalSOCblock1htech(ltstoragetech,h)$[ord(h)=pHourFinalblock1h].. vFinalSOCblock1htech(ltstoragetech) =e=
 897                             vStateofchargetech(ltstoragetech,h);
 898  defChangeSOCblock1htech(ltstoragetech).. vChangeSOCblock1htech(ltstoragetech) =e= vFinalSOCblock1htech(ltstoragetech)
 899                                - vInitSOCblock1htech(ltstoragetech);
 900  defFinalSOCblockpeaktotal2htech(ltstoragetech,h)$[ord(h)=pHourFinalblockpeaktotal2h].. vFinalSOCblockpeaktotal2htech(ltstoragetech) =e=
 901                             vStateofchargetech(ltstoragetech,h);
 902  defChangeSOCblockpeaktotal2htech(ltstoragetech).. vChangeSOCblockpeaktotal2htech(ltstoragetech) =e= vFinalSOCblockpeaktotal2htech(ltstoragetech)
 903                                - vInitSOCblockpeaktotal2htech(ltstoragetech);
 904  defFinalSOCblockpeaknet3htech(ltstoragetech,h)$[ord(h)=pHourFinalblockpeaknet3h].. vFinalSOCblockpeaknet3htech(ltstoragetech) =e=
 905                             vStateofchargetech(ltstoragetech,h);
 906  defChangeSOCblockpeaknet3htech(ltstoragetech).. vChangeSOCblockpeaknet3htech(ltstoragetech) =e= vFinalSOCblockpeaknet3htech(ltstoragetech)
 907                                - vInitSOCblockpeaknet3htech(ltstoragetech);
 908  defFinalSOCblock4htech(ltstoragetech,h)$[ord(h)=pHourFinalblock4h].. vFinalSOCblock4htech(ltstoragetech) =e=
 909                             vStateofchargetech(ltstoragetech,h);
 910  defChangeSOCblock4htech(ltstoragetech).. vChangeSOCblock4htech(ltstoragetech) =e= vFinalSOCblock4htech(ltstoragetech)
 911                                - vInitSOCblock4htech(ltstoragetech);
 912  defFinalSOCblockpeaknetramp5htech(ltstoragetech,h)$[ord(h)=pHourFinalblockpeaknetramp5h].. vFinalSOCblockpeaknetramp5htech(ltstoragetech) =e=
 913                             vStateofchargetech(ltstoragetech,h);
 914  defChangeSOCblockpeaknetramp5htech(ltstoragetech).. vChangeSOCblockpeaknetramp5htech(ltstoragetech) =e= vFinalSOCblockpeaknetramp5htech(ltstoragetech)
 915                                - vInitSOCblockpeaknetramp5htech(ltstoragetech);
 916  defFinalSOCblock6htech(ltstoragetech,h)$[ord(h)=pHourFinalblock6h].. vFinalSOCblock6htech(ltstoragetech) =e=
 917                             vStateofchargetech(ltstoragetech,h);
 918  defChangeSOCblock6htech(ltstoragetech).. vChangeSOCblock6htech(ltstoragetech) =e= vFinalSOCblock6htech(ltstoragetech)
 919                                - vInitSOCblock6htech(ltstoragetech);
 920  setInitSOCblock1hststoragetech(ststoragetech).. vInitSOCblock1htech(ststoragetech) =e=
 921                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 922  setInitSOCblockpeaktotal2hststoragetech(ststoragetech).. vInitSOCblockpeaktotal2htech(ststoragetech) =e=
 923                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 924  setInitSOCblockpeaknet3hststoragetech(ststoragetech).. vInitSOCblockpeaknet3htech(ststoragetech) =e=
 925                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 926  setInitSOCblock4hststoragetech(ststoragetech).. vInitSOCblock4htech(ststoragetech) =e=
 927                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 928  setInitSOCblockpeaknetramp5hststoragetech(ststoragetech).. vInitSOCblockpeaknetramp5htech(ststoragetech) =e=
 929                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 930  setInitSOCblock6hststoragetech(ststoragetech).. vInitSOCblock6htech(ststoragetech) =e=
 931                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 932   
 933  varCost.. vVarcostannual =e= pWeightblock0h*(sum((egu,block0h),vVarcost(egu,block0h))+sum((tech,block0h),vVarcosttech(tech,block0h)))
 934          + pWeightblock1h*(sum((egu,block1h),vVarcost(egu,block1h))+sum((tech,block1h),vVarcosttech(tech,block1h)))
 935          + pWeightblockpeaktotal2h*(sum((egu,blockpeaktotal2h),vVarcost(egu,blockpeaktotal2h))+sum((tech,blockpeaktotal2h),vVarcosttech(tech,blockpeaktotal2h)))
 936          + pWeightblockpeaknet3h*(sum((egu,blockpeaknet3h),vVarcost(egu,blockpeaknet3h))+sum((tech,blockpeaknet3h),vVarcosttech(tech,blockpeaknet3h)))
 937          + pWeightblock4h*(sum((egu,block4h),vVarcost(egu,block4h))+sum((tech,block4h),vVarcosttech(tech,block4h)))
 938          + pWeightblockpeaknetramp5h*(sum((egu,blockpeaknetramp5h),vVarcost(egu,blockpeaknetramp5h))+sum((tech,blockpeaknetramp5h),vVarcosttech(tech,blockpeaknetramp5h)))
 939          + pWeightblock6h*(sum((egu,block6h),vVarcost(egu,block6h))+sum((tech,block6h),vVarcosttech(tech,block6h)));
 940  co2Ems.. vCO2emsannual =e= pWeightblock0h*(sum((egu,block0h),vCO2ems(egu,block0h))+sum((tech,block0h),vCO2emstech(tech,block0h)))
 941          + pWeightblock1h*(sum((egu,block1h),vCO2ems(egu,block1h))+sum((tech,block1h),vCO2emstech(tech,block1h)))
 942          + pWeightblockpeaktotal2h*(sum((egu,blockpeaktotal2h),vCO2ems(egu,blockpeaktotal2h))+sum((tech,blockpeaktotal2h),vCO2emstech(tech,blockpeaktotal2h)))
 943          + pWeightblockpeaknet3h*(sum((egu,blockpeaknet3h),vCO2ems(egu,blockpeaknet3h))+sum((tech,blockpeaknet3h),vCO2emstech(tech,blockpeaknet3h)))
 944          + pWeightblock4h*(sum((egu,block4h),vCO2ems(egu,block4h))+sum((tech,block4h),vCO2emstech(tech,block4h)))
 945          + pWeightblockpeaknetramp5h*(sum((egu,blockpeaknetramp5h),vCO2ems(egu,blockpeaknetramp5h))+sum((tech,blockpeaknetramp5h),vCO2emstech(tech,blockpeaknetramp5h)))
 946          + pWeightblock6h*(sum((egu,block6h),vCO2ems(egu,block6h))+sum((tech,block6h),vCO2emstech(tech,block6h)));
 947   
 948  limitHydroGenblock0h(z)..sum((hydroegu,block0h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,block0h)) =l= pMaxgenhydroblock0h(z);
 949  limitHydroGenblock1h(z)..sum((hydroegu,block1h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,block1h)) =l= pMaxgenhydroblock1h(z);
 950  limitHydroGenblockpeaktotal2h(z)..sum((hydroegu,blockpeaktotal2h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,blockpeaktotal2h)) =l= pMaxgenhydroblockpeaktotal2h(z);
 951  limitHydroGenblockpeaknet3h(z)..sum((hydroegu,blockpeaknet3h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,blockpeaknet3h)) =l= pMaxgenhydroblockpeaknet3h(z);
 952  limitHydroGenblock4h(z)..sum((hydroegu,block4h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,block4h)) =l= pMaxgenhydroblock4h(z);
 953  limitHydroGenblockpeaknetramp5h(z)..sum((hydroegu,blockpeaknetramp5h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,blockpeaknetramp5h)) =l= pMaxgenhydroblockpeaknetramp5h(z);
 954  limitHydroGenblock6h(z)..sum((hydroegu,block6h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,block6h)) =l= pMaxgenhydroblock6h(z);
 955   
 956  rampUpblock0h(egu,block0h)$[ORD(block0h)>1].. vGen(egu,block0h)+vRegup(egu,block0h)+vFlex(egu,block0h)+vCont(egu,block0h) - vGen(egu,block0h-1) =l=
 957                    pRamprate(egu);
 958  rampUpblock0htech(tech,block0h)$[ORD(block0h)>1].. vGentech(tech,block0h)+vReguptech(tech,block0h)+vFlextech(tech,block0h)+vConttech(tech,block0h) - vGentech(tech,block0h-1) =l=
 959                    pRampratetech(tech)*vN(tech);
 960  rampUpblock1h(egu,block1h)$[ORD(block1h)>1].. vGen(egu,block1h)+vRegup(egu,block1h)+vFlex(egu,block1h)+vCont(egu,block1h) - vGen(egu,block1h-1) =l=
 961                    pRamprate(egu);
 962  rampUpblock1htech(tech,block1h)$[ORD(block1h)>1].. vGentech(tech,block1h)+vReguptech(tech,block1h)+vFlextech(tech,block1h)+vConttech(tech,block1h) - vGentech(tech,block1h-1) =l=
 963                    pRampratetech(tech)*vN(tech);
 964  rampUpblockpeaktotal2h(egu,blockpeaktotal2h)$[ORD(blockpeaktotal2h)>1].. vGen(egu,blockpeaktotal2h)+vRegup(egu,blockpeaktotal2h)+vFlex(egu,blockpeaktotal2h)+vCont(egu,blockpeaktotal2h) - vGen(egu,blockpeaktotal2h-1) =l=
 965                    pRamprate(egu);
 966  rampUpblockpeaktotal2htech(tech,blockpeaktotal2h)$[ORD(blockpeaktotal2h)>1].. vGentech(tech,blockpeaktotal2h)+vReguptech(tech,blockpeaktotal2h)+vFlextech(tech,blockpeaktotal2h)+vConttech(tech,blockpeaktotal2h) - vGentech(tech,blockpeaktotal2h-1) =l=
 967                    pRampratetech(tech)*vN(tech);
 968  rampUpblockpeaknet3h(egu,blockpeaknet3h)$[ORD(blockpeaknet3h)>1].. vGen(egu,blockpeaknet3h)+vRegup(egu,blockpeaknet3h)+vFlex(egu,blockpeaknet3h)+vCont(egu,blockpeaknet3h) - vGen(egu,blockpeaknet3h-1) =l=
 969                    pRamprate(egu);
 970  rampUpblockpeaknet3htech(tech,blockpeaknet3h)$[ORD(blockpeaknet3h)>1].. vGentech(tech,blockpeaknet3h)+vReguptech(tech,blockpeaknet3h)+vFlextech(tech,blockpeaknet3h)+vConttech(tech,blockpeaknet3h) - vGentech(tech,blockpeaknet3h-1) =l=
 971                    pRampratetech(tech)*vN(tech);
 972  rampUpblock4h(egu,block4h)$[ORD(block4h)>1].. vGen(egu,block4h)+vRegup(egu,block4h)+vFlex(egu,block4h)+vCont(egu,block4h) - vGen(egu,block4h-1) =l=
 973                    pRamprate(egu);
 974  rampUpblock4htech(tech,block4h)$[ORD(block4h)>1].. vGentech(tech,block4h)+vReguptech(tech,block4h)+vFlextech(tech,block4h)+vConttech(tech,block4h) - vGentech(tech,block4h-1) =l=
 975                    pRampratetech(tech)*vN(tech);
 976  rampUpblockpeaknetramp5h(egu,blockpeaknetramp5h)$[ORD(blockpeaknetramp5h)>1].. vGen(egu,blockpeaknetramp5h)+vRegup(egu,blockpeaknetramp5h)+vFlex(egu,blockpeaknetramp5h)+vCont(egu,blockpeaknetramp5h) - vGen(egu,blockpeaknetramp5h-1) =l=
 977                    pRamprate(egu);
 978  rampUpblockpeaknetramp5htech(tech,blockpeaknetramp5h)$[ORD(blockpeaknetramp5h)>1].. vGentech(tech,blockpeaknetramp5h)+vReguptech(tech,blockpeaknetramp5h)+vFlextech(tech,blockpeaknetramp5h)+vConttech(tech,blockpeaknetramp5h) - vGentech(tech,blockpeaknetramp5h-1) =l=
 979                    pRampratetech(tech)*vN(tech);
 980  rampUpblock6h(egu,block6h)$[ORD(block6h)>1].. vGen(egu,block6h)+vRegup(egu,block6h)+vFlex(egu,block6h)+vCont(egu,block6h) - vGen(egu,block6h-1) =l=
 981                    pRamprate(egu);
 982  rampUpblock6htech(tech,block6h)$[ORD(block6h)>1].. vGentech(tech,block6h)+vReguptech(tech,block6h)+vFlextech(tech,block6h)+vConttech(tech,block6h) - vGentech(tech,block6h-1) =l=
 983                    pRampratetech(tech)*vN(tech);
 984   
 985  Parameters
 986  *DIAGNOSTIC PARAMETERS
 987           pModelstat
 988           pSolvestat
 989                  ;
 990   
 991  Variables
 992  *Total cost variables
 993           vZannual                              obj func [thousandUSD per yr]
 994                  ;
 995   
 996  Equations
 997  *Cost equations
 998           objfunc                         objective function = sum investment and variable costs
 999           investmentcost                  calculate investment costs = fixed O&M + annualized capital costs
1000  *Generation and reserve constraints
1001           limitflexrestech(tech,h)        limit spin reserves by new plants by ramp rate
1002           limitcontrestech(tech,h)        limit cont reserves by new plants by ramp rate
1003           limitreguprestech(tech,h)       limit reg reserves by new plants by ramp rate
1004           limitallresuptech(tech,h)       limit total generation plus reserves of new plants to capacity
1005                   limitdacsgen(dacstech,h)
1006  *Renewable generation
1007           setrenewgentech(renewtech,h)    set electricity generation by new renewable generators
1008  *Storage constraints
1009                  limitStoTechGen(storagetech,h)
1010                  limitStoTechCharge(storagetech,h)
1011                  stoTechSOCLimit(storagetech,h)
1012          limitstorageresuptech(storagetech,h)
1013  *CO2 emissions cap
1014           enforceco2emissionscap          restrict total co2 emissions to cap
1015                   ;
1016   
1017  ******************CALCULATE COSTS (OBJ FUNC)**********
1018  *Objective: minimize fixed + variable costs
1019  objfunc..                vZannual =e= vFixedcostannual + vVarcostannual;
1020  **************************************************
1021   
1022  ******************GENERATION AND RESERVE CONSTRAINTS******************
1023  *Limit spinning and regulation reserves each to ramp capability and time of reserve
1024  limitflexrestech(tech,h)$[pMaxflexoffertech(tech)>0].. vFlextech(tech,h) =l= pMaxflexoffertech(tech)*vN(tech);
1025  limitcontrestech(tech,h)$[pMaxcontoffertech(tech)>0].. vConttech(tech,h) =l= pMaxcontoffertech(tech)*vN(tech);
1026  limitreguprestech(tech,h)$[pMaxregupoffertech(tech)>0].. vReguptech(tech,h) =l= pMaxregupoffertech(tech)*vN(tech);
1027   
1028  *Limit up reserves plus generation to spare capacity for generating technologies
1029  limitallresuptech(gentechs,h).. vGentech(gentechs,h) + vFlextech(gentechs,h) + vConttech(gentechs,h) + vReguptech(gentechs,h) =l= pCapactech(gentechs) * vN(gentechs);
1030   
1031  *Limit DACS generation and reserves
1032  limitdacsgen(dacstech,h).. vGentech(dacstech,h) =g= pCapactech(dacstech)*vN(dacstech);
1033   
1034  *Limit new wind and solar generation
1035  setrenewgentech(renewtech,h)..   vGentech(renewtech,h) =l= pCapactech(renewtech)*pCf(renewtech,h)*vN(renewtech);
1036  ********************************************************************
1037   
1038  ******************STORAGE CONSTRAINTS******************
1039  *Bound generation (based on market participation) charging and SOC
1040  limitStoTechGen(storagetech,h) .. vGentech(storagetech,h) =l= pStoinenergymarket*vPowBuiltSto(storagetech);
1041  limitStoTechCharge(storagetech,h) .. vChargetech(storagetech,h) =l= vPowBuiltSto(storagetech)*pChargeDischargeCapRatio;
1042  stoTechSOCLimit(storagetech,h) .. vStateofchargetech(storagetech,h) =l= vEneBuiltSto(storagetech);
1043   
1044  *Limit up reserves to spare capacity plus charging
1045  limitstorageresuptech(storagetech,h) .. vReguptech(storagetech,h) + vFlextech(storagetech,h) + vConttech(storagetech,h) =l= (vPowBuiltSto(storagetech) - vGentech(storagetech,h)) + vChargetech(storagetech,h);
1046  *******************************************************
1047   
1048  ******************CO2 EMISSIONS CONSTRAINT******************
1049  *Meet emissions cap
1050  enforceco2emissionscap.. vCO2emsannual =l= pCO2emcap;
1051  ************************************************************
1052   
1053  Model ceWithED includes all equations /all/;
1054  solve ceWithED using lp minimizing vZannual;
1055   
1056  pModelstat = ceWithED.Modelstat;
1057  pSolvestat = ceWithED.solvestat;
GAMS 36.2.0  r433180e Released Sep  3, 2021 WEX-WEI x86 64bit/MS Windows - 01/29/23 05:13:15 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\atpha